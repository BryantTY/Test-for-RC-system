{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "example",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "leaves",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "generateMerkleProof",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "leaves",
						"type": "bytes32[]"
					}
				],
				"name": "generateMerkleRoot",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "testExampleFunction",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "merkleProof",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes32",
						"name": "leafNode",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "rootHash",
						"type": "bytes32"
					}
				],
				"name": "verifyMerkleProof",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"trustless cross-chain/merkle proof/GenMP.sol": "MerkleTree"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1",
			"license": "MIT",
			"urls": [
				"bzz-raw://e6b3cab69f655e40117bbdd8e68d7423f26d1b24248fb189c295f08de8940616",
				"dweb:/ipfs/QmWoyRthsBDMa7gJpH5UCjpa8uNUQfyaGbSgY3uvhBH9F3"
			]
		},
		"trustless cross-chain/merkle proof/GenMP.sol": {
			"keccak256": "0x58413ea0ab423f49dbea16d4d0cbab12eeb0dc4e5b922c6dbef43c8c2c1fdfa4",
			"license": "MIT",
			"urls": [
				"bzz-raw://cd7d5095925dfc2df869793a4b0cd0d0ce01307ec970ce87c555d1a0d0cca081",
				"dweb:/ipfs/QmUzEBCr42APCNzMVPqcPpHfREUYPmuDyT49knk8BKhmdb"
			]
		}
	},
	"version": 1
}